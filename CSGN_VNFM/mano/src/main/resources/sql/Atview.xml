<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Atview">

	<select id="getVldAtViewMeta" parameterType="hashmap" resultType="java.util.LinkedHashMap" >
		
		SELECT vld.vld_no,
	       nfv_version_tab.id as vld_id,
	       vld.cp_no,
	       vld.cp_id
	  FROM
	       (SELECT *
	         FROM nfv_vld_tab as a,
	              (SELECT nfv_cp_ref.cp_ref_no,
	                     nfv_cp_ref.cp_no,
	                     nfv_cp_tab.id as cp_id
	                FROM nfv_cp_ref
	                   INNER JOIN nfv_cp_tab
	                       ON nfv_cp_ref.cp_no = nfv_cp_tab.cp_no
	              ) as b
	        WHERE a.connection_ref_no = b.cp_ref_no
	       ) as vld,
	       nfv_version_tab
	 WHERE vld.version_no = nfv_version_tab.version_no
	 order by vld_id, cp_no, cp_id
 
	</select>
	
	<select id="getVmAtViewMeta" parameterType="hashmap" resultType="java.util.LinkedHashMap" >
		
		SELECT a.vm_no,
	       a.vm_id,
	       a.vm_state,
	       b.cp_no,
	       b.cp_id
	  FROM nfv_vm_tab as a,
	       (SELECT nfv_cp_ref.cp_ref_no,
	              nfv_cp_ref.cp_no,
	              nfv_cp_tab.id as cp_id
	         FROM nfv_cp_ref
	            INNER JOIN nfv_cp_tab
	                ON nfv_cp_ref.cp_no = nfv_cp_tab.cp_no
	       ) as b
	 WHERE a.cp_ref_no = b.cp_ref_no
	 order by vm_id, cp_no, cp_id
	</select>
	
	<!-- treeMenu -->
	<select id="getTmenu" resultType="java.util.LinkedHashMap" >
		
		SELECT 
		  nfv_tmenu_tab.tmenu_no,
		  nfv_tmenu_tab.tmenu_sort,
		  nfv_tmenu_tab.tmenu_id,
		  nfv_tmenu_tab.tmenu_show,
		  nfv_tmenu_tab.tmenu_delimiter,
		  nfv_tmenu_tab.tmenu_option,
		  func_tab.func_ref_no,
		  func_tab.func_id
		FROM 
		  nfv_tmenu_tab,
		  (
		  SELECT nfv_tmenu_ref.tmenu_ref_no,
		    nfv_tmenu_ref.func_ref_no,
		    nfv_nfp_tab.nfp_id as func_id
		  FROM 
		    nfv_tmenu_ref, nfv_nfp_tab
		  WHERE 
		    nfv_tmenu_ref.func_ref_no = nfv_nfp_tab.nfp_no
		  UNION ALL
		  SELECT 
		    nfv_tmenu_ref.tmenu_ref_no,
		    nfv_tmenu_ref.func_ref_no,
		    nfv_vnfc_tab.vnfc_id as func_id
		  FROM 
		    nfv_tmenu_ref, nfv_vnfc_tab
		  WHERE 
		    nfv_tmenu_ref.func_ref_no = nfv_vnfc_tab.vnfc_no
		  UNION ALL
		  SELECT 
		    nfv_tmenu_ref.tmenu_ref_no,
		    nfv_tmenu_ref.func_ref_no,
		    nfv_vdu_tab.vdu_id as func_id
		  FROM 
		    nfv_tmenu_ref, nfv_vdu_tab
		  WHERE 
		    nfv_tmenu_ref.func_ref_no = nfv_vdu_tab.vdu_no
		  UNION ALL
		  SELECT 
		  	nfv_tmenu_ref.tmenu_ref_no,
			nfv_tmenu_ref.func_ref_no,
			CONCAT(nfv_flavour_tab.flavour_flag,CONCAT('_',nfv_flavour_tab.flavour_id)) as func_id
		  FROM 
		  	nfv_tmenu_ref,
			nfv_flavour_tab
			WHERE nfv_tmenu_ref.func_ref_no = nfv_flavour_tab.flavour_no		
		  UNION ALL
		  SELECT 
		    nfv_tmenu_ref.tmenu_ref_no,
		    nfv_tmenu_ref.func_ref_no,
		    nfv_sdf_tab.sdf_id as func_id
		  FROM 
		    nfv_tmenu_ref, nfv_sdf_tab
		  WHERE 
		    nfv_tmenu_ref.func_ref_no = nfv_sdf_tab.sdf_no
		  UNION ALL
		  SELECT 
		    nfv_tmenu_ref.tmenu_ref_no, 
		    nfv_tmenu_ref.func_ref_no,
		    nfv_vnfrtd_tab.vnfrtd_id as func_id
		  FROM 
		    nfv_tmenu_ref, nfv_vnfrtd_tab
		  WHERE 
		    nfv_tmenu_ref.func_ref_no = nfv_vnfrtd_tab.vnfrtd_no
		  UNION ALL
		  
		  
		  SELECT 
		    nfv_tmenu_ref.tmenu_ref_no,
		    nfv_tmenu_ref.func_ref_no,
		    nfv_nfvi_tab.id as func_id
		  FROM 
		    nfv_tmenu_ref, nfv_nfvi_tab
		  WHERE 
		    nfv_tmenu_ref.func_ref_no = nfv_nfvi_tab.nfvi_no
		    
		    
		    
		  UNION ALL
		  SELECT 
		    nfv_tmenu_ref.tmenu_ref_no,
		    nfv_tmenu_ref.func_ref_no,
		    nfv_version_tab.id as func_id
		  FROM nfv_tmenu_ref, nfv_version_tab
		  WHERE 
		    nfv_tmenu_ref.func_ref_no = nfv_version_tab.version_no
	    UNION ALL
	       SELECT nfv_tmenu_ref.tmenu_ref_no,
	              nfv_tmenu_ref.func_ref_no,
	              nfv_cp_tab.id as func_id
	         FROM nfv_tmenu_ref,
	              nfv_cp_tab
	        WHERE nfv_tmenu_ref.func_ref_no = nfv_cp_tab.cp_no
		  UNION ALL
		  SELECT 
		    nfv_tmenu_ref.tmenu_ref_no,
		    nfv_tmenu_ref.func_ref_no,
		    nfv_security_tab.item as func_id
		  FROM 
		    nfv_tmenu_ref, nfv_security_tab
		  WHERE 
		    nfv_tmenu_ref.func_ref_no = nfv_security_tab.security_no
		  UNION ALL
		  SELECT 
		    nfv_tmenu_ref.tmenu_ref_no,
		    nfv_tmenu_ref.func_ref_no,
		    nfv_policy_tab.policy as func_id
		  FROM 
		    nfv_tmenu_ref, nfv_policy_tab
		  WHERE 
		    nfv_tmenu_ref.func_ref_no = nfv_policy_tab.policy_no
		  UNION ALL
		  SELECT 
		    nfv_tmenu_ref.tmenu_ref_no,
		    nfv_tmenu_ref.func_ref_no,
		    nfv_qos_tab.item as func_id
		  FROM 
		    nfv_tmenu_ref, nfv_qos_tab
		  WHERE 
		    nfv_tmenu_ref.func_ref_no = nfv_qos_tab.qos_no
		  UNION ALL
		  SELECT 
		    nfv_tmenu_ref.tmenu_ref_no,
		    nfv_tmenu_ref.func_ref_no,
		    nfv_lifecycle_tab.item as func_id
		  FROM nfv_tmenu_ref, nfv_lifecycle_tab
		  WHERE 
		    nfv_tmenu_ref.func_ref_no = nfv_lifecycle_tab.life_no
		  UNION ALL
		  SELECT 
		    nfv_tmenu_ref.tmenu_ref_no,
		    nfv_tmenu_ref.func_ref_no,
		    nfv_monitoring_tab.item as func_id
		  FROM nfv_tmenu_ref, nfv_monitoring_tab
		  WHERE 
		    nfv_tmenu_ref.func_ref_no = nfv_monitoring_tab.mnt_no
		    UNION ALL
		  SELECT 
		    nfv_tmenu_ref.tmenu_ref_no,
		    nfv_tmenu_ref.func_ref_no,
		    nfv_vnfdep_tab.item as func_id
		  FROM nfv_tmenu_ref, nfv_vnfdep_tab
		  WHERE 
		    nfv_tmenu_ref.func_ref_no = nfv_vnfdep_tab.vnfdep_no
		    UNION ALL
		  SELECT 
		    nfv_tmenu_ref.tmenu_ref_no,
		    nfv_tmenu_ref.func_ref_no,
		    nfv_constraint_tab.item as func_id
		  FROM nfv_tmenu_ref, nfv_constraint_tab
		  WHERE 
		    nfv_tmenu_ref.func_ref_no = nfv_constraint_tab.cstr_no
		    UNION ALL
		  SELECT 
		    nfv_tmenu_ref.tmenu_ref_no,
		    nfv_tmenu_ref.func_ref_no,
		    nfv_constituent_tab.vdu_id as func_id
		  FROM nfv_tmenu_ref, nfv_constituent_tab
		  WHERE 
		    nfv_tmenu_ref.func_ref_no = nfv_constituent_tab.cstt_no
		    UNION ALL
		  SELECT 
		    nfv_tmenu_ref.tmenu_ref_no,
		    nfv_tmenu_ref.func_ref_no,
		    nfv_nfvidc_tab.nfvidc_id as func_id
		  FROM nfv_tmenu_ref, nfv_nfvidc_tab
		  WHERE 
		    nfv_tmenu_ref.func_ref_no = nfv_nfvidc_tab.nfvidc_no
		    
		    
		   UNION ALL
		    		  SELECT 
		    nfv_tmenu_ref.tmenu_ref_no,
		    nfv_tmenu_ref.func_ref_no,
		    nfv_version_tab.id as func_id
		  FROM nfv_tmenu_ref, nfv_state_tab, nfv_version_tab
		  WHERE 
		    nfv_tmenu_ref.func_ref_no = nfv_state_tab.state_no
			 and nfv_state_tab.version_no=nfv_version_tab.version_no
		    
		   UNION ALL
                         SELECT 
		  	nfv_tmenu_ref.tmenu_ref_no,
			nfv_tmenu_ref.func_ref_no,
            CONCAT(nfv_convnf_tab.flavour_nm,CONCAT('_',nfv_version_tab.id)) as func_id
		  FROM 
		  	nfv_tmenu_ref,
			nfv_convnf_tab,
            nfv_version_tab            
			WHERE nfv_tmenu_ref.func_ref_no = nfv_convnf_tab.convnf_no
            AND nfv_convnf_tab.version_no = nfv_version_tab.version_no 
		    
		    
		    
		) as func_tab 
		WHERE 
		  nfv_tmenu_tab.tmenu_ref_no = func_tab.tmenu_ref_no
		  AND (
		  		nfv_tmenu_tab.tmenu_delimiter = #{delimiter}
		  		<if test='delimiter2 != null'>
		  		or nfv_tmenu_tab.tmenu_delimiter = #{delimiter2}
		  		</if>
		  		)
		  
		  order by tmenu_sort, func_id
       
	</select>
	
	<!--  options -->
	<insert id="postQosRef" parameterType="hashmap">
	
		insert into 
		  nfv_qos_ref
		values
		(
		  #{qos_ref_no},
		  #{qos_no}
		)
	</insert>
	
	<insert id="postCpRef" parameterType="hashmap">
	
		insert into 
		  nfv_cp_ref
		values
		(
		  #{cp_ref_no},
		  #{cp_no}
		)

	</insert>
	
	<insert id="postSecurityRef" parameterType="hashmap">
	
		insert into 
		  nfv_security_ref
		values
		(
		  #{security_ref_no},
		  #{security_no}
		)
	</insert>
	
	<insert id="postLifecycleRef" parameterType="hashmap">
	
		insert into 
			nfv_lifecycle_ref
		values
		(
			#{life_ref_no},
			#{life_no}
		)
	</insert>
	
	<insert id="postVnfcRef" parameterType="hashmap">
	
		insert into 
			nfv_vnfc_ref
		values
		(
			#{vnfc_ref_no},
			#{vnfc_no}
		)
	</insert>
	
	<insert id="postMonitoringRef" parameterType="hashmap">
	
		insert into 
			nfv_monitoring_ref
		values
		(
			#{mnt_ref_no},
			#{mnt_no}
		)
	</insert>
	
	<delete id="deleteLifecycleRef" parameterType="hashmap">
	
		delete from nfv_lifecycle_ref
		where life_ref_no = #{life_ref_no}
		
	</delete>
	
	<delete id="deleteVnfcRef" parameterType="hashmap">
	
		delete from nfv_vnfc_ref
		where vnfc_ref_no = #{vnfc_ref_no}

	</delete>
	
	<delete id="deleteMonitoringRef" parameterType="hashmap">
		
		delete from nfv_monitoring_ref
		where mnt_ref_no = #{mnt_ref_no}

	</delete>
	
	
	<select id="getVld" parameterType="hashmap" resultType="java.util.LinkedHashMap" >
		
		SELECT nfv_version_tab.id, 
		       nfv_version_tab.vendor, 
		       nfv_version_tab.version as descriptor_version, 
		       vld.number_of_endpoints, 
		       vld.root_requirement, 
		       vld.leaf_requirement, 
		       qos,
		       qos_no,
		       vld.test_access, 
		       vld.con as connection,
		       vld.con_no as connection_no,
		       vld.connectivity_type, 
		       vld.seq as vld_security,
		       vld.seq_no as vld_security_no
		  FROM 
		       (SELECT * 
		         FROM nfv_vld_tab as a, 
		              (SELECT nfv_qos_ref.qos_ref_no as qos_tmp_no, 
		                     nfv_qos_tab.item as qos, 
		                     nfv_qos_tab.qos_no as qos_no,
		                     'NULL' as con, 
		                     'NULL' as con_no,
		                     'NULL' as seq,
		                     'NULL' as seq_no
		                FROM nfv_qos_ref 
		                   INNER JOIN nfv_qos_tab 
		                       ON nfv_qos_ref.qos_no = nfv_qos_tab.qos_no 
		              ) as b 
		        WHERE a.qos_ref_no = b.qos_tmp_no 
		             UNION ALL 
		       SELECT * 
		         FROM nfv_vld_tab as a, 
		              (SELECT nfv_cp_ref.cp_ref_no, 
		                     'NULL' as qos, 
		                     'NULL' as qos_no, 
		                     nfv_cp_tab.id as con,
		                     nfv_cp_tab.cp_no as con_no, 
		                     'NULL' as seq,
		                     'NULL' as seq_no
		                FROM nfv_cp_ref 
		                   INNER JOIN nfv_cp_tab 
		                       ON nfv_cp_ref.cp_no = nfv_cp_tab.cp_no 
		              ) as b 
		        WHERE a.connection_ref_no = b.cp_ref_no 
		             UNION ALL 
		       SELECT * 
		         FROM nfv_vld_tab as a, 
		              (SELECT nfv_security_ref.security_ref_no, 
		                     'NULL' as qos, 
		                     'NULL' as qos_no, 
		                     'NULL' as con, 
		                     'NULL' as con_no,
		                     nfv_security_tab.item as seq,
		                     nfv_security_tab.security_no as seq_no
		                FROM nfv_security_ref 
		                   INNER JOIN nfv_security_tab 
		                       ON nfv_security_ref.security_no = nfv_security_tab.security_no 
		              ) as b 
		        WHERE a.vld_security_ref_no = b.security_ref_no 
		       ) as vld, 
		       nfv_version_tab 
		 WHERE vld.version_no = nfv_version_tab.version_no 
		 and nfv_version_tab.id = #{vldId}
		 order by connection
 
	</select>
	
	<insert id="postVld" parameterType="hashmap">
	
		insert into 
		  nfv_vld_tab
		values
		(
		  #{vld_no},
		  #{version_no},
		  #{number_of_endpoints},
		  #{root_requirement},
		  #{leaf_requirement},
		  #{qos_ref_no},
		  #{test_access},
		  #{cp_ref_no},
		  #{connectivity_type},
		  #{security_ref_no}
		)

	</insert>
	
	<insert id="postVersion" parameterType="hashmap">
	
		insert into 
		  nfv_version_tab
		values(
		  #{version_no},
		  #{id},
		  #{vendor},
		  #{version}
		)
		
	</insert>
	
	<update id="putVld" parameterType="hashmap">
	
		update
		  nfv_vld_tab 
		set
		  number_of_endpoints = #{number_of_endpoints},
		  root_requirement = #{root_requirement},
		  leaf_requirement = #{leaf_requirement},
		  test_access = #{test_access},
		  connectivity_type = #{connectivity_type}
		where
		  version_no = #{version_no}

	</update>
	
	<update id="putVersion" parameterType="hashmap">
	
		update
		  nfv_version_tab 
		set
		  vendor = #{vendor},
		  version = #{version}
		where 
		  id = #{id}
		
	</update>
	
	<select id="getVersionOne" parameterType="hashmap" resultType="java.util.LinkedHashMap" >
		select * from nfv_version_tab
		where id= #{id}
	</select>
	
	<select id="getVldOne" parameterType="hashmap" resultType="java.util.LinkedHashMap" >
		select * from nfv_vld_tab
		where version_no= #{version_no}
	</select>
	
	<select id="passableDeleteMainContent" parameterType="hashmap" resultType="int" >
		select count(*) from nfv_function_ref
		where function_no = #{function_no}
	</select>
	
	<delete id="deleteVersion" parameterType="hashmap">
		delete from nfv_version_tab
		where id= #{id}
	</delete>
	
	<delete id="deleteVld" parameterType="hashmap">
		delete from nfv_vld_tab
		where version_no= #{version_no}
	</delete>
	
	<delete id="deleteQosRef" parameterType="hashmap">
		delete from nfv_qos_ref
		where qos_ref_no= #{qos_ref_no}
	</delete>
	
	<delete id="deleteCpRef" parameterType="hashmap">
		delete from nfv_cp_ref
		where cp_ref_no= #{cp_ref_no}
	</delete>
	
	<delete id="deleteSecurityRef" parameterType="hashmap">
		delete from nfv_security_ref
		where security_ref_no= #{security_ref_no}
	</delete>
	
	<!-- cp -->
	<select id="getCp" parameterType="hashmap" resultType="java.util.LinkedHashMap" >
		select
		  *
		from
		  nfv_cp_tab
		where id = #{id}
	
	</select>
	
	<insert id="postCp" parameterType="hashmap">
	
		insert into 
			nfv_cp_tab
		values
		(
		  #{cp_no},
		  #{id},
		  #{virtual_link_reference},
		  #{type}
		)
		
	</insert>
	
	<update id="putCp" parameterType="hashmap">
		update 
			nfv_cp_tab
		set
		  virtual_link_reference = #{virtual_link_reference},
		  type = #{type}
		where
		  id = #{id}
	</update>
	
	<select id="passableDeleteCp" parameterType="hashmap" resultType="int" >
		select 
			count(*)
		from 
			nfv_cp_tab a, nfv_cp_ref b
		where 
			a.cp_no = b.cp_no
			and a.id = #{id}
	</select>
	
	<delete id="deleteCp" parameterType="hashmap">
		delete 
		from 
		  nfv_cp_tab
		where
		  id = #{id}
	</delete>
	
	<!-- pnfd -->
	<select id="getPnfd" parameterType="hashmap" resultType="java.util.LinkedHashMap" >
		
		SELECT nfv_version_tab.id,
	       nfv_version_tab.vendor,
	       nfv_version_tab.version,
	       vld.description,
	       vld.con as connection_point_id,
	       vld.con_no as connection_point_no,
	       vld.type as connection_point_type,
	       vld.descriptor_version,
	       vld.seq as pnfd_security,
	       vld.seq_no as pnfd_security_no
	  FROM
	       (SELECT *
	         FROM nfv_pnfd_tab as a,
	              (SELECT nfv_cp_ref.cp_ref_no,
	                     nfv_cp_tab.id as con,
	                     nfv_cp_tab.cp_no as con_no,
	                     nfv_cp_tab.type,
	                     'NULL' as seq,
	                     'NULL' as seq_no
	                FROM nfv_cp_ref
	                   INNER JOIN nfv_cp_tab
	                       ON nfv_cp_ref.cp_no = nfv_cp_tab.cp_no
	              ) as b
	        WHERE a.connection_point_ref_no = b.cp_ref_no
	             UNION ALL
	       SELECT *
	         FROM nfv_pnfd_tab as a,
	              (SELECT nfv_security_ref.security_ref_no,
	                     'NULL' as con,
	                     'NULL' as con_no,
	                     'NULL' as type,
	                     nfv_security_tab.item as seq,
	                     nfv_security_tab.security_no as seq_no
	                FROM nfv_security_ref
	                   INNER JOIN nfv_security_tab
	                       ON nfv_security_ref.security_no = nfv_security_tab.security_no
	              ) as b
	        WHERE a.pnfd_security_ref_no = b.security_ref_no
	       ) as vld,
	       nfv_version_tab
	 WHERE vld.version_no = nfv_version_tab.version_no
	       AND nfv_version_tab.id = #{id}
	       order by connection_point_id
	
	</select>
	
	<insert id="postPnfd" parameterType="hashmap">
	
		insert into 
		  nfv_pnfd_tab
		values
		(
		  #{pnfd_no},
		  #{version_no},
		  #{description},
		  #{cp_ref_no},
		  #{descriptor_version},
		  #{security_ref_no}
		)
		
	</insert>
	
	<select id="getPnfdOne" parameterType="hashmap" resultType="java.util.LinkedHashMap" >
		select * from nfv_pnfd_tab
		where version_no= #{version_no}
	</select>
	
	<update id="putPnfd" parameterType="hashmap">
		update
			nfv_pnfd_tab
		set
			description = #{description},
			descriptor_version =#{descriptor_version}
		where
			version_no = #{version_no}
	</update>
	
	<delete id="deletePnfd" parameterType="hashmap">
		delete from nfv_pnfd_tab
		where version_no= #{version_no}
	</delete>
	
	<select id="getTmenuOne" parameterType="hashmap" resultType="java.util.LinkedHashMap" >
		
		select * from nfv_tmenu_tab
		where tmenu_id = #{tmenu_id}

	</select>
	
	<insert id="postTmenu" parameterType="hashmap">
	
		insert into
		  nfv_tmenu_tab
		values
		(
		  #{tmenu_no},
		  #{tmenu_sort},
		  #{tmenu_id},
		  #{tmenu_delimiter},
		  ''
		)
		
	</insert>
	
	<delete id="deleteTmenu" parameterType="hashmap">
	
		delete from nfv_tmenu_tab
		where tmenu_id = #{tmenu_id}
		
	</delete>
	
	<insert id="postTmenuRef" parameterType="hashmap">
	
		insert into
			nfv_tmenu_ref
		values
		(
			#{tmenu_ref_no},
			#{func_ref_no}
		)
		
	</insert>
	
	<delete id="deleteTmenuRef" parameterType="hashmap">
	
		delete from nfv_tmenu_ref
		where func_ref_no = #{func_ref_no}
		
	</delete>
	
	<!-- security -->
	<select id="getSecurity" parameterType="hashmap" resultType="java.util.LinkedHashMap" >
	
		select * from nfv_security_tab
		<if test="item != null">
		where item = #{item}
		</if>
		
	</select>
	
	<insert id="postSecurity" parameterType="hashmap">
		
		insert into 
			nfv_security_tab
		values
		(
			#{security_no},
			#{item}
		)

	</insert>
	
	<update id="putSecurity" parameterType="hashmap">
	
		update
			nfv_security_tab
		set
			item = #{item}
		where
			security_no = #{security_no}
		
		
	</update>
	
	<select id="passableDeleteSecurity" parameterType="hashmap" resultType="int" >
	
		select
			count(*) 
		from 
			 nfv_security_tab a, nfv_security_ref b
		where 
			a.security_no = b.security_no
			and a.item = #{item}
	
	</select>
	
	<delete id="deleteSecurity" parameterType="hashmap">
	
		delete from
			nfv_security_tab
		where
			item = #{item}
	
	</delete>
	
	<!-- vdu -->
	<select id="getVdu" parameterType="hashmap" resultType="java.util.LinkedHashMap" >
		
		SELECT vdu.vdu_no,
	       vdu.vdu_id,
	       vdu.vm_image,
	       vdu.computation_requirement,
	       vdu.vmre,
	       vdu.vnbr,
	       vdu.life_item,
	       vdu.life_no,
	       vdu.vdu_constraint,
	       vdu.high_availability,
	       vdu.scale_in_out,
	       vdu.vnfc_id,
	       vdu.vnfc_no,
	       vdu.cp_id,
	       vdu.cp_vlr,
	       vdu.cp_type,
	       vdu.mnt_item,
	       vdu.mnt_no
	  FROM
	       (SELECT a.*,
	              b.life_item,
	              b.life_no,
	              'NULL' as vnfc_id,
	              'NULL' as vnfc_no,
	              'NULL' as cp_id,
	              'NULL' as cp_vlr,
	              'NULL' as cp_type,
	              'NULL' as mnt_item,
	              'NULL' as mnt_no
	         FROM nfv_vdu_tab as a,
	              (SELECT life_ref.life_ref_no,
	                     life_tab.item as life_item,
	                     life_tab.life_no as life_no
	                FROM nfv_lifecycle_ref as life_ref
	                   INNER JOIN nfv_lifecycle_tab as life_tab
	                       ON life_ref.life_no = life_tab.life_no
	              ) as b
	        WHERE a.life_ref_no = b.life_ref_no
	             UNION ALL
	       SELECT a.*,
	              'NULL' as life_item,
	              'NULL' as life_no,
	              vnfc.vnfc_id,
	              vnfc.vnfc_no,
	              vnfc.cp_id,
	              vnfc.cp_vlr,
	              vnfc.cp_type,
	              'NULL' as mnt_item,
	              'NULL' as mnt_no
	         FROM nfv_vdu_tab as a,
	              (SELECT a.vnfc_ref_no,
	                     a.vnfc_id,
	                     a.vnfc_no,
	                     b.cp_id,
	                     b.cp_vlr,
	                     b.cp_type
	                FROM
	                     (SELECT vnfc_ref.vnfc_ref_no,
	                            vnfc_tab.vnfc_id,
	                            vnfc_tab.vnfc_no,
	                            vnfc_tab.connection_ref_no
	                       FROM nfv_vnfc_ref as vnfc_ref
	                          INNER JOIN nfv_vnfc_tab as vnfc_tab
	                              ON vnfc_ref.vnfc_no = vnfc_tab.vnfc_no
	                     ) as a,
	                     (SELECT nfv_cp_ref.cp_ref_no,
	                            nfv_cp_tab.id as cp_id,
	                            nfv_cp_tab.virtual_link_reference as cp_vlr,
	                            nfv_cp_tab.type as cp_type
	                       FROM nfv_cp_ref
	                          INNER JOIN nfv_cp_tab
	                              ON nfv_cp_ref.cp_no = nfv_cp_tab.cp_no
	                     ) as b
	               WHERE a.connection_ref_no = b.cp_ref_no
	              ) as vnfc
	        WHERE a.vnfc_ref_no = vnfc.vnfc_ref_no
	             UNION ALL
	       SELECT a.*,
	              'NULL' as life_item,
	              'NULL' as life_no,
	              'NULL' as vnfc_id,
	              'NULL' as vnfc_no,
	              'NULL' as cp_id,
	              'NULL' as cp_vlr,
	              'NULL' as cp_type,
	              b.mnt_item,
	              b.mnt_no
	         FROM nfv_vdu_tab as a,
	              (SELECT mnt_ref.mnt_ref_no,
	                     mnt_tab.item as mnt_item,
	                     mnt_tab.mnt_no as mnt_no
	                FROM nfv_monitoring_ref as mnt_ref
	                   INNER JOIN nfv_monitoring_tab as mnt_tab
	                       ON mnt_ref.mnt_no = mnt_tab.mnt_no
	              ) as b
	        WHERE a.mnt_ref_no = b.mnt_ref_no
	       ) as vdu
	 WHERE vdu.vdu_id = #{id}
	</select>
	
	<select id="getVduOne" parameterType="hashmap" resultType="java.util.LinkedHashMap" >
	
		select * from nfv_vdu_tab
		where vdu_id = #{vdu_id}

	</select>
	
	<insert id="postVdu" parameterType="hashmap">
	
		insert into nfv_vdu_tab 
		values
		(
		  #{vdu_no}, 
		  #{vdu_id}, 
		  #{vm_image}, 
		  #{computation_requirement}, 
		  #{vmre}, 
		  #{vnbr}, 
		  #{life_ref_no}, 
		  #{vdu_constraint}, 
		  #{high_availability}, 
		  #{scale_in_out}, 
		  #{vnfc_ref_no}, 
		  #{mnt_ref_no}
		)

	</insert>
	

	
	<update id="putVdu" parameterType="hashmap">
		
		update
			nfv_vdu_tab 
		set
			vm_image = #{vm_image}, 
			computation_requirement = #{computation_requirement}, 
			vmre = #{vmre}, 
			vnbr = #{vnbr}, 
			vdu_constraint = #{vdu_constraint}, 
			high_availability = #{high_availability}, 
			scale_in_out = #{scale_in_out}
		where
			vdu_id = #{vdu_id}
  
	</update>
	
	<delete id="deleteVdu" parameterType="hashmap">
		delete from nfv_vdu_tab where vdu_id = #{vdu_id}
	</delete>
	
	<!-- nfvi(기존 nfvid) -->
	<select id="getNfvi" parameterType="hashmap" resultType="java.util.LinkedHashMap" >
		select 
			A.nfvi_no, 
		    A.id as nfvi_id, 
		    B.image_no, 
		    B.image_name
		from 
			nfv_nfvi_tab A, nfv_image_tab B 
		where 
			A.nfvi_no = B.nfvi_no
		and
			A.id = #{id}	
	</select>
	
	<select id="getNfviOne" parameterType="hashmap" resultType="java.util.LinkedHashMap" >
		SELECT 
			nfvi_no, id 
		FROM 
			nfv_nfvi_tab
		WHERE 
			id = #{id}
	</select>
	
	<insert id="postNfvi" parameterType="hashmap">
		insert into 
			nfv_nfvi_tab
		values
			(#{nfvi_no}, #{id})
	</insert>
	
	
	<delete id="deleteImageTab" parameterType="hashmap">
		delete 
		from 
			nfv_image_tab
		where 
			nfvi_no = #{nfvi_no}
	</delete>	
	
	<insert id="postImageTab" parameterType="hashmap">
		insert into nfv_image_tab values (#{nfvi_no}, #{image_no}, #{image_name})
	</insert>
	
	<insert id="postMntRef" parameterType="hashmap">
		 insert into 
		 	nfv_monitoring_ref( mnt_ref_no, mnt_no ) 
		 values( #{mnt_ref_no}, #{mnt_no} )
	</insert>
	
	<insert id="postFuncRef" parameterType="hashmap">
		 insert into 
		 	nfv_function_ref( function_ref_no, function_no ) 
		 values( #{func_ref_no}, #{func_no} )
	</insert>
	
	<delete id="deleteNfvi" parameterType="hashmap">
		delete 
		from 
			nfv_nfvi_tab
		where 
			id = #{id}
	</delete>	
	
	<delete id="deleteMntRef" parameterType="hashmap">
		delete 
		from 
			nfv_monitoring_ref
		where 
			mnt_ref_no = #{mnt_ref_no}
	</delete>	
	
	<delete id="deleteFuncRef" parameterType="hashmap">
		delete 
		from 
			nfv_function_ref
		where 
			function_ref_no = #{func_ref_no}
	</delete>
	
	<!-- vnfd -->
	<select id="getVnfd" parameterType="hashmap" resultType="java.util.LinkedHashMap" >
		SELECT nfv_version_tab.id as vnfd_id,
			nfv_version_tab.vendor as vnfd_vendor,
			nfv_version_tab.version as vnfd_version,
			vnfd.*
		FROM nfv_version_tab,
		   (SELECT a.vnfd_no,
				  a.version_no,
				  a.descriptor_version,
				  b.vdu_no,
				  b.vdu_id,
				  b.vm_image,
				  b.computation_requirement,
				  b.vmre,
				  b.vnbr,
				  b.life_item,
				  b.vdu_constraint,
				  b.high_availability,
				  b.scale_in_out,
				  b.vnfc_id,
				  b.cp_id,
				  b.cp_vlr,
				  b.cp_type,
				  b.mnt_item,
				  'NULL' as vld_version_no,
				  'NULL' as vld_no,
				  'NULL' as vld_id,
				  'NULL' as vld_vendor,
				  'NULL' as vld_version,
				  'NULL' as number_of_endpoints,
				  'NULL' as root_requirement,
				  'NULL' as leaf_requirement,
				  'NULL' as vld_qos,
				  'NULL' as test_access,
				  'NULL' as vld_con,
				  'NULL' as vld_con_type,
				  'NULL' as vld_security,
				  'NULL' as vnfd_cp_no,
				  'NULL' as vnfd_cp_id,
				  'NULL' as vnfd_cp_vlr,
				  'NULL' as vnfd_cp_type,
				  'NULL' as vnfd_life_no,
				  'NULL' as vnfd_life_item,
				  'NULL' as dep_no,
				  'NULL' as dep_item,
				  'NULL' as vnfd_mnt_no,
				  'NULL' as vnfd_mnt_item,
				  'NULL' as flavour_no,
				  'NULL' as flavour_id,
				  'NULL' as flavour_key,
				  'NULL' as cstr_item,
				  'NULL' as cstr_vdu_id,
				  'NULL' as instance_cnt,
				  'NULL' as cstr_vnfc_id,
				  'NULL' as policy_no,
				  'NULL' as policy_item,
				  a.manifest_file,
				  'NULL' as security_no,
				  'NULL' as security_item
			 FROM nfv_vnfd_tab a,
				  (SELECT func.function_ref_no as vdu_ref_no,
						 vdu.*
					FROM nfv_function_ref as func,
						 (SELECT a.*,
								b.life_item,
								'NULL' as vnfc_id,
								'NULL' as cp_id,
								'NULL' as cp_vlr,
								'NULL' as cp_type,
								'NULL' as mnt_item
						   FROM nfv_vdu_tab as a,
								(SELECT life_ref.life_ref_no,
									   life_tab.item as life_item
								  FROM nfv_lifecycle_ref as life_ref
									 INNER JOIN nfv_lifecycle_tab as life_tab
										 ON life_ref.life_no = life_tab.life_no
								) as b
						  WHERE a.life_ref_no = b.life_ref_no
							   UNION ALL
						 SELECT a.*,
								'NULL' as life_item,
								vnfc.vnfc_id,
								vnfc.cp_id,
								vnfc.cp_vlr,
								vnfc.cp_type,
								'NULL' as mnt_item
						   FROM nfv_vdu_tab as a,
								(SELECT a.vnfc_ref_no,
									   a.vnfc_id,
									   b.cp_id,
									   b.cp_vlr,
									   b.cp_type
								  FROM
									   (SELECT vnfc_ref.vnfc_ref_no,
											  vnfc_tab.vnfc_id,
											  vnfc_tab.connection_ref_no
										 FROM nfv_vnfc_ref as vnfc_ref
											INNER JOIN nfv_vnfc_tab as vnfc_tab
												ON vnfc_ref.vnfc_no = vnfc_tab.vnfc_no
									   ) as a,
									   (SELECT nfv_cp_ref.cp_ref_no,
											  nfv_cp_tab.id as cp_id,
											  nfv_cp_tab.virtual_link_reference as cp_vlr,
											  nfv_cp_tab.type as cp_type
										 FROM nfv_cp_ref
											INNER JOIN nfv_cp_tab
												ON nfv_cp_ref.cp_no = nfv_cp_tab.cp_no
									   ) as b
								 WHERE a.connection_ref_no = b.cp_ref_no
								) as vnfc
						  WHERE a.vnfc_ref_no = vnfc.vnfc_ref_no
							   UNION ALL
						 SELECT a.*,
								'NULL' as life_item,
								'NULL' as vnfc_id,
								'NULL' as cp_id,
								'NULL' as cp_vlr,
								'NULL' as cp_type,
								b.mnt_item
						   FROM nfv_vdu_tab as a,
								(SELECT mnt_ref.mnt_ref_no,
									   mnt_tab.item as mnt_item
								  FROM nfv_monitoring_ref as mnt_ref
									 INNER JOIN nfv_monitoring_tab as mnt_tab
										 ON mnt_ref.mnt_no = mnt_tab.mnt_no
								) as b
						  WHERE a.mnt_ref_no = b.mnt_ref_no
						 ) as vdu
				   WHERE func.function_no = vdu.vdu_no
				  ) as b
			WHERE a.vdu_ref_no = b.vdu_ref_no
				 UNION ALL
		   SELECT a.vnfd_no,
				  a.version_no,
				  a.descriptor_version,
				  'NULL' as vdu_no,
				  'NULL' as vdu_id,
				  'NULL' as vm_image,
				  'NULL' as computation_requirement,
				  'NULL' as vmre,
				  'NULL' as vnbr,
				  'NULL' as life_item,
				  'NULL' as vdu_constraint,
				  'NULL' as high_availability,
				  'NULL' as scale_in_out,
				  'NULL' as vnfc_id,
				  'NULL' as cp_id,
				  'NULL' as cp_vlr,
				  'NULL' as cp_type,
				  'NULL' as mnt_item,
				  c.vld_version_no,
				  c.vld_no,
				  c.vld_id,
				  c.vld_vendor,
				  c.vld_version,
				  c.number_of_endpoints,
				  c.root_requirement,
				  c.leaf_requirement,
				  c.vld_qos,
				  c.test_access,
				  c.vld_con,
				  c.vld_con_type,
				  c.vld_security,
				  'NULL' as vnfd_cp_no,
				  'NULL' as vnfd_cp_id,
				  'NULL' as vnfd_cp_vlr,
				  'NULL' as vnfd_cp_type,
				  'NULL' as vnfd_life_no,
				  'NULL' as vnfd_life_item,
				  'NULL' as dep_no,
				  'NULL' as dep_item,
				  'NULL' as vnfd_mnt_no,
				  'NULL' as vnfd_mnt_item,
				  'NULL' as flavour_no,
				  'NULL' as flavour_id,
				  'NULL' as flavour_key,
				  'NULL' as cstr_item,
				  'NULL' as cstr_vdu_id,
				  'NULL' as instance_cnt,
				  'NULL' as cstr_vnfc_id,
				  'NULL' as policy_no,
				  'NULL' as policy_item,
				  a.manifest_file,
				  'NULL' as security_no,
				  'NULL' as security_item
			 FROM nfv_vnfd_tab a,
				  (SELECT func.function_ref_no as vld_ref_no,
						 vlds.*
					FROM nfv_function_ref as func,
						 (SELECT vld.vld_no,
								vld.version_no as vld_version_no,
								nfv_version_tab.id as vld_id,
								nfv_version_tab.vendor as vld_vendor,
								nfv_version_tab.version as vld_version,
								vld.number_of_endpoints,
								vld.root_requirement,
								vld.leaf_requirement,
								qos as vld_qos,
								vld.test_access,
								vld.con as vld_con,
								vld.connectivity_type as vld_con_type,
								vld.seq as vld_security
						   FROM
								(SELECT *
								  FROM nfv_vld_tab as a,
									   (SELECT nfv_qos_ref.qos_ref_no as qos_tmp_no,
											  nfv_qos_tab.item as qos,
											  'NULL' as con,
											  'NULL' as seq
										 FROM nfv_qos_ref
											INNER JOIN nfv_qos_tab
												ON nfv_qos_ref.qos_no = nfv_qos_tab.qos_no
									   ) as b
								 WHERE a.qos_ref_no = b.qos_tmp_no
									  UNION ALL
								SELECT *
								  FROM nfv_vld_tab as a,
									   (SELECT nfv_cp_ref.cp_ref_no,
											  'NULL' as qos,
											  nfv_cp_tab.id as con,
											  'NULL' as seq
										 FROM nfv_cp_ref
											INNER JOIN nfv_cp_tab
												ON nfv_cp_ref.cp_no = nfv_cp_tab.cp_no
									   ) as b
								 WHERE a.connection_ref_no = b.cp_ref_no
									  UNION ALL
								SELECT *
								  FROM nfv_vld_tab as a,
									   (SELECT nfv_security_ref.security_ref_no,
											  'NULL' as qos,
											  'NULL' as con,
											  nfv_security_tab.item as seq
										 FROM nfv_security_ref
											INNER JOIN nfv_security_tab
												ON nfv_security_ref.security_no = nfv_security_tab.security_no
									   ) as b
								 WHERE a.vld_security_ref_no = b.security_ref_no
								) as vld,
								nfv_version_tab
						  WHERE vld.version_no = nfv_version_tab.version_no
						 ) as vlds
				   WHERE func.function_no = vlds.vld_version_no
				  ) as c
			WHERE a.vld_ref_no = c.vld_ref_no
				 UNION ALL
		   SELECT a.vnfd_no,
				  a.version_no,
				  a.descriptor_version,
				  'NULL' as vdu_no,
				  'NULL' as vdu_id,
				  'NULL' as vm_image,
				  'NULL' as computation_requirement,
				  'NULL' as vmre,
				  'NULL' as vnbr,
				  'NULL' as life_item,
				  'NULL' as vdu_constraint,
				  'NULL' as high_availability,
				  'NULL' as scale_in_out,
				  'NULL' as vnfc_id,
				  'NULL' as cp_id,
				  'NULL' as cp_vlr,
				  'NULL' as cp_type,
				  'NULL' as mnt_item,
				  'NULL' as vld_version_no,
				  'NULL' as vld_no,
				  'NULL' as vld_id,
				  'NULL' as vld_vendor,
				  'NULL' as vld_version,
				  'NULL' as number_of_endpoints,
				  'NULL' as root_requirement,
				  'NULL' as leaf_requirement,
				  'NULL' as vld_qos,
				  'NULL' as test_access,
				  'NULL' as vld_con,
				  'NULL' as vld_con_type,
				  'NULL' as vld_security,
				  d.vnfd_cp_no,
				  d.vnfd_cp_id,
				  d.vnfd_cp_vlr,
				  d.vnfd_cp_type,
				  'NULL' as vnfd_life_no,
				  'NULL' as vnfd_life_item,
				  'NULL' as dep_no,
				  'NULL' as dep_item,
				  'NULL' as vnfd_mnt_no,
				  'NULL' as vnfd_mnt_item,
				  'NULL' as flavour_no,
				  'NULL' as flavour_id,
				  'NULL' as flavour_key,
				  'NULL' as cstr_item,
				  'NULL' as cstr_vdu_id,
				  'NULL' as instance_cnt,
				  'NULL' as cstr_vnfc_id,
				  'NULL' as policy_no,
				  'NULL' as policy_item,
				  a.manifest_file,
				  'NULL' as security_no,
				  'NULL' as security_item
			 FROM nfv_vnfd_tab a,
				  (SELECT nfv_cp_ref.cp_no as vnfd_cp_no,
						 nfv_cp_ref.cp_ref_no,
						 nfv_cp_tab.id as vnfd_cp_id,
						 nfv_cp_tab.virtual_link_reference as vnfd_cp_vlr,
						 nfv_cp_tab.type as vnfd_cp_type
					FROM nfv_cp_ref
					   INNER JOIN nfv_cp_tab
						   ON nfv_cp_ref.cp_no = nfv_cp_tab.cp_no
				  ) as d
			WHERE a.cp_ref_no = d.cp_ref_no
				 UNION ALL
		   SELECT a.vnfd_no,
				  a.version_no,
				  a.descriptor_version,
				  'NULL' as vdu_no,
				  'NULL' as vdu_id,
				  'NULL' as vm_image,
				  'NULL' as computation_requirement,
				  'NULL' as vmre,
				  'NULL' as vnbr,
				  'NULL' as life_item,
				  'NULL' as vdu_constraint,
				  'NULL' as high_availability,
				  'NULL' as scale_in_out,
				  'NULL' as vnfc_id,
				  'NULL' as cp_id,
				  'NULL' as cp_vlr,
				  'NULL' as cp_type,
				  'NULL' as mnt_item,
				  'NULL' as vld_version_no,
				  'NULL' as vld_no,
				  'NULL' as vld_id,
				  'NULL' as vld_vendor,
				  'NULL' as vld_version,
				  'NULL' as number_of_endpoints,
				  'NULL' as root_requirement,
				  'NULL' as leaf_requirement,
				  'NULL' as vld_qos,
				  'NULL' as test_access,
				  'NULL' as vld_con,
				  'NULL' as vld_con_type,
				  'NULL' as vld_security,
				  'NULL' as vnfd_cp_no,
				  'NULL' as vnfd_cp_id,
				  'NULL' as vnfd_cp_vlr,
				  'NULL' as vnfd_cp_type,
				  e.vnfd_life_no,
				  e.vnfd_life_item,
				  'NULL' as dep_no,
				  'NULL' as dep_item,
				  'NULL' as vnfd_mnt_no,
				  'NULL' as vnfd_mnt_item,
				  'NULL' as flavour_no,
				  'NULL' as flavour_id,
				  'NULL' as flavour_key,
				  'NULL' as cstr_item,
				  'NULL' as cstr_vdu_id,
				  'NULL' as instance_cnt,
				  'NULL' as cstr_vnfc_id,
				  'NULL' as policy_no,
				  'NULL' as policy_item,
				  a.manifest_file,
				  'NULL' as security_no,
				  'NULL' as security_item
			 FROM nfv_vnfd_tab a,
				  (SELECT life_ref.life_no as vnfd_life_no,
						 life_ref.life_ref_no,
						 life_tab.item as vnfd_life_item
					FROM nfv_lifecycle_ref as life_ref
					   INNER JOIN nfv_lifecycle_tab as life_tab
						   ON life_ref.life_no = life_tab.life_no
				  ) as e
			WHERE a.life_ref_no = e.life_ref_no
				 UNION ALL
		   SELECT a.vnfd_no,
				  a.version_no,
				  a.descriptor_version,
				  'NULL' as vdu_no,
				  'NULL' as vdu_id,
				  'NULL' as vm_image,
				  'NULL' as computation_requirement,
				  'NULL' as vmre,
				  'NULL' as vnbr,
				  'NULL' as life_item,
				  'NULL' as vdu_constraint,
				  'NULL' as high_availability,
				  'NULL' as scale_in_out,
				  'NULL' as vnfc_id,
				  'NULL' as cp_id,
				  'NULL' as cp_vlr,
				  'NULL' as cp_type,
				  'NULL' as mnt_item,
				  'NULL' as vld_version_no,
				  'NULL' as vld_no,
				  'NULL' as vld_id,
				  'NULL' as vld_vendor,
				  'NULL' as vld_version,
				  'NULL' as number_of_endpoints,
				  'NULL' as root_requirement,
				  'NULL' as leaf_requirement,
				  'NULL' as vld_qos,
				  'NULL' as test_access,
				  'NULL' as vld_con,
				  'NULL' as vld_con_type,
				  'NULL' as vld_security,
				  'NULL' as vnfd_cp_no,
				  'NULL' as vnfd_cp_id,
				  'NULL' as vnfd_cp_vlr,
				  'NULL' as vnfd_cp_type,
				  'NULL' as vnfd_life_no,
				  'NULL' as vnfd_life_item,
				  f.dep_no,
				  f.dep_item,
				  'NULL' as vnfd_mnt_no,
				  'NULL' as vnfd_mnt_item,
				  'NULL' as flavour_no,
				  'NULL' as flavour_id,
				  'NULL' as flavour_key,
				  'NULL' as cstr_item,
				  'NULL' as cstr_vdu_id,
				  'NULL' as instance_cnt,
				  'NULL' as cstr_vnfc_id,
				  'NULL' as policy_no,
				  'NULL' as policy_item,
				  a.manifest_file,
				  'NULL' as security_no,
				  'NULL' as security_item
			 FROM nfv_vnfd_tab a,
				  (SELECT nfv_function_ref.function_no as dep_no,
						 nfv_function_ref.function_ref_no,
						 nfv_version_tab.id as dep_item
					FROM nfv_function_ref
					   INNER JOIN nfv_version_tab
						   ON nfv_function_ref.function_no = nfv_version_tab.version_no
				  ) as f
			WHERE a.dependency_ref_no = f.function_ref_no
				 UNION ALL
		   SELECT a.vnfd_no,
				  a.version_no,
				  a.descriptor_version,
				  'NULL' as vdu_no,
				  'NULL' as vdu_id,
				  'NULL' as vm_image,
				  'NULL' as computation_requirement,
				  'NULL' as vmre,
				  'NULL' as vnbr,
				  'NULL' as life_item,
				  'NULL' as vdu_constraint,
				  'NULL' as high_availability,
				  'NULL' as scale_in_out,
				  'NULL' as vnfc_id,
				  'NULL' as cp_id,
				  'NULL' as cp_vlr,
				  'NULL' as cp_type,
				  'NULL' as mnt_item,
				  'NULL' as vld_version_no,
				  'NULL' as vld_no,
				  'NULL' as vld_id,
				  'NULL' as vld_vendor,
				  'NULL' as vld_version,
				  'NULL' as number_of_endpoints,
				  'NULL' as root_requirement,
				  'NULL' as leaf_requirement,
				  'NULL' as vld_qos,
				  'NULL' as test_access,
				  'NULL' as vld_con,
				  'NULL' as vld_con_type,
				  'NULL' as vld_security,
				  'NULL' as vnfd_cp_no,
				  'NULL' as vnfd_cp_id,
				  'NULL' as vnfd_cp_vlr,
				  'NULL' as vnfd_cp_type,
				  'NULL' as vnfd_life_no,
				  'NULL' as vnfd_life_item,
				  'NULL' as dep_no,
				  'NULL' as dep_item,
				  g.vnfd_mnt_no,
				  g.vnfd_mnt_item,
				  'NULL' as flavour_no,
				  'NULL' as flavour_id,
				  'NULL' as flavour_key,
				  'NULL' as cstr_item,
				  'NULL' as cstr_vdu_id,
				  'NULL' as instance_cnt,
				  'NULL' as cstr_vnfc_id,
				  'NULL' as policy_no,
				  'NULL' as policy_item,
				  a.manifest_file,
				  'NULL' as security_no,
				  'NULL' as security_item
			 FROM nfv_vnfd_tab a,
				  (SELECT mnt_ref.mnt_no as vnfd_mnt_no, 
						 mnt_ref.mnt_ref_no ,
						 mnt_tab.item as vnfd_mnt_item
					FROM nfv_monitoring_ref as mnt_ref
					   INNER JOIN nfv_monitoring_tab as mnt_tab
						   ON mnt_ref.mnt_no = mnt_tab.mnt_no
				  ) as g
			WHERE a.monitoring_no = g.mnt_ref_no
				 UNION ALL
		   SELECT a.vnfd_no,
				  a.version_no,
				  a.descriptor_version,
				  'NULL' as vdu_no,
				  'NULL' as vdu_id,
				  'NULL' as vm_image,
				  'NULL' as computation_requirement,
				  'NULL' as vmre,
				  'NULL' as vnbr,
				  'NULL' as life_item,
				  'NULL' as vdu_constraint,
				  'NULL' as high_availability,
				  'NULL' as scale_in_out,
				  'NULL' as vnfc_id,
				  'NULL' as cp_id,
				  'NULL' as cp_vlr,
				  'NULL' as cp_type,
				  'NULL' as mnt_item,
				  'NULL' as vld_version_no,
				  'NULL' as vld_no,
				  'NULL' as vld_id,
				  'NULL' as vld_vendor,
				  'NULL' as vld_version,
				  'NULL' as number_of_endpoints,
				  'NULL' as root_requirement,
				  'NULL' as leaf_requirement,
				  'NULL' as vld_qos,
				  'NULL' as test_access,
				  'NULL' as vld_con,
				  'NULL' as vld_con_type,
				  'NULL' as vld_security,
				  'NULL' as vnfd_cp_no,
				  'NULL' as vnfd_cp_id,
				  'NULL' as vnfd_cp_vlr,
				  'NULL' as vnfd_cp_type,
				  'NULL' as vnfd_life_no,
				  'NULL' as vnfd_life_item,
				  'NULL' as dep_no,
				  'NULL' as dep_item,
				  'NULL' as vnfd_mnt_no,
				  'NULL' as vnfd_mnt_item,
				  h.flavour_no,
				  flavour_id,
				  h.flavour_key,
				  h.cstr_item,
				  h.vdu_id as cstr_vdu_id,
				  h.instance_cnt,
				  h.cp_id as cstr_vnfc_id,
				  'NULL' as policy_no,
				  'NULL' as policy_item,
				  a.manifest_file,
				  'NULL' as security_no,
				  'NULL' as security_item
			 FROM nfv_vnfd_tab a, nfv_flavour_ref b,
				  (
				  select 
						a.flavour_no,
							a.flavour_id,
							a.flavour_flag,
							a.flavour_key,
							b.item as cstr_item,
							'NULL' as vdu_id,
							'NULL' as instance_cnt,
							'NULL' as cp_id
						from 
						nfv_flavour_tab a, nfv_constraint_tab b, nfv_constraint_ref c
						where 1=1
						and a.cstr_ref_no = c.cstr_ref_no
						and b.cstr_no = c.cstr_no
			
						UNION ALL
				  select 
						a.flavour_no,
							a.flavour_id,
							a.flavour_flag,
							a.flavour_key,
							'NULL' as cstr_item,
							c.vdu_id,
							c.instance_cnt,
							g.id as cp_id
						from 
							nfv_flavour_tab a, nfv_constituent_ref b, 
							nfv_constituent_tab c, nfv_vnfc_ref d, nfv_vnfc_tab e,
							nfv_cp_ref f, nfv_cp_tab g 
						where 1=1 
						and a.cstt_ref_no = b.cstt_ref_no
						and b.cstt_no = c.cstt_no
						and c.vnfc_ref_no = d.vnfc_ref_no
						and d.vnfc_no = e.vnfc_no
						and e.connection_ref_no = f.cp_ref_no
						and f.cp_no = g.cp_no
				  ) as h
				WHERE a.flavour_ref_no = b.flavour_ref_no
						and b.flavour_no = h.flavour_no
				 UNION ALL
		   SELECT a.vnfd_no,
				  a.version_no,
				  a.descriptor_version,
				  'NULL' as vdu_no,
				  'NULL' as vdu_id,
				  'NULL' as vm_image,
				  'NULL' as computation_requirement,
				  'NULL' as vmre,
				  'NULL' as vnbr,
				  'NULL' as life_item,
				  'NULL' as vdu_constraint,
				  'NULL' as high_availability,
				  'NULL' as scale_in_out,
				  'NULL' as vnfc_id,
				  'NULL' as cp_id,
				  'NULL' as cp_vlr,
				  'NULL' as cp_type,
				  'NULL' as mnt_item,
				  'NULL' as vld_version_no,
				  'NULL' as vld_no,
				  'NULL' as vld_id,
				  'NULL' as vld_vendor,
				  'NULL' as vld_version,
				  'NULL' as number_of_endpoints,
				  'NULL' as root_requirement,
				  'NULL' as leaf_requirement,
				  'NULL' as vld_qos,
				  'NULL' as test_access,
				  'NULL' as vld_con,
				  'NULL' as vld_con_type,
				  'NULL' as vld_security,
				  'NULL' as vnfd_cp_no,
				  'NULL' as vnfd_cp_id,
				  'NULL' as vnfd_cp_vlr,
				  'NULL' as vnfd_cp_type,
				  'NULL' as vnfd_life_no,
				  'NULL' as vnfd_life_item,
				  'NULL' as dep_no,
				  'NULL' as dep_item,
				  'NULL' as vnfd_mnt_no,
				  'NULL' as vnfd_mnt_item,
				  'NULL' as flavour_no,
				  'NULL' as flavour_id,
				  'NULL' as flavour_key,
				  'NULL' as cstr_item,
				  'NULL' as cstr_vdu_id,
				  'NULL' as instance_cnt,
				  'NULL' as cstr_vnfc_id,
				  i.policy_no,
				  i.policy_item,
				  a.manifest_file,
				  'NULL' as security_no,
				  'NULL' as security_item
			 FROM nfv_vnfd_tab a,
				  (SELECT nfv_policy_ref.policy_no,
						 nfv_policy_ref.policy_ref_no,
						 nfv_policy_tab.policy as policy_item
					FROM nfv_policy_ref
					   INNER JOIN nfv_policy_tab
						   ON nfv_policy_ref.policy_no = nfv_policy_tab.policy_no
				  ) as i
			WHERE a.policy_ref_no = i.policy_ref_no
				 UNION ALL
		   SELECT a.vnfd_no,
				  a.version_no,
				  a.descriptor_version,
				  'NULL' as vdu_no,
				  'NULL' as vdu_id,
				  'NULL' as vm_image,
				  'NULL' as computation_requirement,
				  'NULL' as vmre,
				  'NULL' as vnbr,
				  'NULL' as life_item,
				  'NULL' as vdu_constraint,
				  'NULL' as high_availability,
				  'NULL' as scale_in_out,
				  'NULL' as vnfc_id,
				  'NULL' as cp_id,
				  'NULL' as cp_vlr,
				  'NULL' as cp_type,
				  'NULL' as mnt_item,
				  'NULL' as vld_version_no,
				  'NULL' as vld_no,
				  'NULL' as vld_id,
				  'NULL' as vld_vendor,
				  'NULL' as vld_version,
				  'NULL' as number_of_endpoints,
				  'NULL' as root_requirement,
				  'NULL' as leaf_requirement,
				  'NULL' as vld_qos,
				  'NULL' as test_access,
				  'NULL' as vld_con,
				  'NULL' as vld_con_type,
				  'NULL' as vld_security,
				  'NULL' as vnfd_cp_no,
				  'NULL' as vnfd_cp_id,
				  'NULL' as vnfd_cp_vlr,
				  'NULL' as vnfd_cp_type,
				  'NULL' as vnfd_life_no,
				  'NULL' as vnfd_life_item,
				  'NULL' as dep_no,
				  'NULL' as dep_item,
				  'NULL' as vnfd_mnt_no,
				  'NULL' as vnfd_mnt_item,
				  'NULL' as flavour_no,
				  'NULL' as flavour_id,
				  'NULL' as flavour_key,
				  'NULL' as cstr_item,
				  'NULL' as cstr_vdu_id,
				  'NULL' as instance_cnt,
				  'NULL' as cstr_vnfc_id,
				  'NULL' as policy_no,
				  'NULL' as policy_item,
				  a.manifest_file,
				  j.security_no,
				  j.security_item
			 FROM nfv_vnfd_tab a,
				  (SELECT nfv_security_ref.security_no, 
						 nfv_security_ref.security_ref_no,
						 nfv_security_tab.item as security_item
					FROM nfv_security_ref
					   INNER JOIN nfv_security_tab
						   ON nfv_security_ref.security_no = nfv_security_tab.security_no
				  ) as j
			WHERE a.security_ref_no = j.security_ref_no
		   ) as vnfd
		WHERE nfv_version_tab.version_no = vnfd.version_no
		AND nfv_version_tab.id = #{id}		
	</select>
	
	<select id="getVnfdOne" parameterType="hashmap" resultType="java.util.LinkedHashMap" >
		SELECT 
			version_tab.version_no, version_tab.id, version_tab.version, vnfd_tab.vnfd_no, vnfd_tab.descriptor_version, 
			vnfd_tab.vdu_ref_no, vnfd_tab.vld_ref_no, vnfd_tab.cp_ref_no, vnfd_tab.life_ref_no, vnfd_tab.dependency_ref_no, 
			vnfd_tab.monitoring_no, vnfd_tab.flavour_ref_no, vnfd_tab.policy_ref_no, vnfd_tab.manifest_file, vnfd_tab.security_ref_no
		FROM 
			nfv_version_tab as version_tab inner join nfv_vnfd_tab as vnfd_tab on vnfd_tab.version_no = version_tab.version_no 
		WHERE 
			version_tab.id = #{id}	
	</select>
	
	<insert id="postVnfd" parameterType="hashmap">
		 insert into 
		 	nfv_vnfd_tab( vnfd_no, version_no, descriptor_version, vdu_ref_no, vld_ref_no, cp_ref_no, life_ref_no, dependency_ref_no, monitoring_no, flavour_ref_no, policy_ref_no, manifest_file, security_ref_no ) 
		 values( #{vnfd_no}, #{version_no}, #{descriptor_version}, #{vdu_ref_no}, #{vld_ref_no}, #{cp_ref_no}, #{life_ref_no}, #{dependency_ref_no}, #{monitoring_no}, #{flavour_ref_no}, #{policy_ref_no}, #{manifest_file}, #{security_ref_no} )
	</insert>
	
	<insert id="postFlavourRef" parameterType="hashmap">
		 insert into 
		 	nfv_flavour_ref( flavour_ref_no, flavour_no ) 
		 values( #{flavour_ref_no}, #{flavour_no} )
	</insert>
	
	<insert id="postPolicyRef" parameterType="hashmap">
		 insert into 
		 	nfv_policy_ref( policy_ref_no, policy_no ) 
		 values( #{policy_ref_no}, #{policy_no} )
	</insert>
	
	<update id="putVnfd" parameterType="hashmap">
		update 
			nfv_vnfd_tab 
		set 
			descriptor_version = #{descriptor_version}, 
			manifest_file = #{manifest_file}
		where 
			vnfd_no = #{vnfd_no}
	</update>
	
	<delete id="deleteVnfd" parameterType="hashmap">
		delete 
		from 
			nfv_vnfd_tab
		where 
			vnfd_no = #{vnfd_no}
	</delete>	
	
	<delete id="deleteFlavourRef" parameterType="hashmap">
		delete 
		from 
			nfv_flavour_ref
		where 
			flavour_ref_no = #{flavour_ref_no}
	</delete>
	
	<delete id="deletePolicyRef" parameterType="hashmap">
		delete 
		from 
			nfv_policy_ref
		where 
			policy_ref_no = #{policy_ref_no}
	</delete>
	
	<!-- nsd -->
	<select id="getNsd" parameterType="hashmap" resultType="java.util.LinkedHashMap" >
		SELECT nfv_version_tab.id as nsd_id,
		   nfv_version_tab.vendor as nsd_vendor,
		   nfv_version_tab.version as nsd_version,
		   nsd.*
		FROM nfv_version_tab,
		   (SELECT a.version_no,
				  x.vnfd_no,
				  x.vnfd_item,
				  'NULL' as vnffgd_no,
				  'NULL' as vnffgd_item,
				  'NULL' as vld_no,
				  'NULL' as vld_item,
				  'NULL' as nsd_life_no,
				  'NULL' as nsd_life_item,
				  'NULL' as nsd_vnfdep_no,
				  'NULL' as nsd_vnfdep_item,
				  'NULL' as nsd_mnt_no,
				  'NULL' as nsd_mnt_item,
				  'NULL' as sdf_no,
				  'NULL' as sdf_id,
				  'NULL' as sdf_flavour_key,
				  'NULL' as vnf_ref_id,
				  'NULL' as vnf_flavour_id,
				  'NULL' as rddc_model,
				  'NULL' as affinity,
				  'NULL' as vnf_cap,
				  'NULL' as vnf_instance_cnt,
				  'NULL' as nsd_policy_no,
				  'NULL' as nsd_policy_item,
				  'NULL' as nsd_cp_no,
				  'NULL' as nsd_cp_id,
				  'NULL' as nsd_cp_vlr,
				  'NULL' as nsd_cp_type,
				  'NULL' as pnfd_no,
				  'NULL' as pnfd_item,
				  'NULL' as nsd_security_no,
				  'NULL' as nsd_security_item
			 FROM nfv_nsd_tab a,
				  (SELECT nfv_function_ref.function_no as vnfd_no, 
						 nfv_function_ref.function_ref_no,
						 nfv_version_tab.id as vnfd_item
					FROM nfv_function_ref
					   INNER JOIN nfv_version_tab
						   ON nfv_function_ref.function_no = nfv_version_tab.version_no
				  ) as x
			WHERE a.vnfd_ref_no = x.function_ref_no
				 UNION ALL
		   SELECT a.version_no,
				  'NULL' as vnfd_no,
				  'NULL' as vnfd_item,
				  y.vnffgd_no,
				  y.vnffgd_item,
				  'NULL' as vld_no,
				  'NULL' as vld_item,
				  'NULL' as nsd_life_no,
				  'NULL' as nsd_life_item,
				  'NULL' as nsd_vnfdep_no,
				  'NULL' as nsd_vnfdep_item,
				  'NULL' as nsd_mnt_no,
				  'NULL' as nsd_mnt_item,
				  'NULL' as sdf_no,
				  'NULL' as sdf_id,
				  'NULL' as sdf_flavour_key,
				  'NULL' as vnf_ref_id,
				  'NULL' as vnf_flavour_id,
				  'NULL' as rddc_model,
				  'NULL' as affinity,
				  'NULL' as vnf_cap,
				  'NULL' as vnf_instance_cnt,
				  'NULL' as nsd_policy_no,
				  'NULL' as nsd_policy_item,
				  'NULL' as nsd_cp_no,
				  'NULL' as nsd_cp_id,
				  'NULL' as nsd_cp_vlr,
				  'NULL' as nsd_cp_type,
				  'NULL' as pnfd_no,
				  'NULL' as pnfd_item,
				  'NULL' as nsd_security_no,
				  'NULL' as nsd_security_item
			 FROM nfv_nsd_tab a,
				  (SELECT nfv_function_ref.function_no as vnffgd_no,
						 nfv_function_ref.function_ref_no,
						 nfv_version_tab.id as vnffgd_item
					FROM nfv_function_ref
					   INNER JOIN nfv_version_tab
						   ON nfv_function_ref.function_no = nfv_version_tab.version_no
				  ) as y
			WHERE a.vnffgd_ref_no = y.function_ref_no
				 UNION ALL
		   SELECT a.version_no,
				  'NULL' as vnfd_no,
				  'NULL' as vnfd_item,
				  'NULL' as vnffgd_no,
				  'NULL' as vnffgd_item,
				  z.vld_no,
				  z.vld_item,
				  'NULL' as nsd_life_no,
				  'NULL' as nsd_life_item,
				  'NULL' as nsd_vnfdep_no,
				  'NULL' as nsd_vnfdep_item,
				  'NULL' as nsd_mnt_no,
				  'NULL' as nsd_mnt_item,
				  'NULL' as sdf_no,
				  'NULL' as sdf_id,
				  'NULL' as sdf_flavour_key,
				  'NULL' as vnf_ref_id,
				  'NULL' as vnf_flavour_id,
				  'NULL' as rddc_model,
				  'NULL' as affinity,
				  'NULL' as vnf_cap,
				  'NULL' as vnf_instance_cnt,
				  'NULL' as nsd_policy_no,
				  'NULL' as nsd_policy_item,
				  'NULL' as nsd_cp_no,
				  'NULL' as nsd_cp_id,
				  'NULL' as nsd_cp_vlr,
				  'NULL' as nsd_cp_type,
				  'NULL' as pnfd_no,
				  'NULL' as pnfd_item,
				  'NULL' as nsd_security_no,
				  'NULL' as nsd_security_item
			 FROM nfv_nsd_tab a,
				  (SELECT nfv_function_ref.function_no as vld_no,
						 nfv_function_ref.function_ref_no,
						 nfv_version_tab.id as vld_item
					FROM nfv_function_ref
					   INNER JOIN nfv_version_tab
						   ON nfv_function_ref.function_no = nfv_version_tab.version_no
				  ) as z
			WHERE a.vld_ref_no = z.function_ref_no
				 UNION ALL
		   SELECT a.version_no,
				  'NULL' as vnfd_no,
				  'NULL' as vnfd_item,
				  'NULL' as vnffgd_no,
				  'NULL' as vnffgd_item,
				  'NULL' as vld_no,
				  'NULL' as vld_item,
				  d.nsd_life_no,
				  d.nsd_life_item,
				  'NULL' as nsd_vnfdep_no,
				  'NULL' as nsd_vnfdep_item,
				  'NULL' as nsd_mnt_no,
				  'NULL' as nsd_mnt_item,
				  'NULL' as sdf_no,
				  'NULL' as sdf_id,
				  'NULL' as sdf_flavour_key,
				  'NULL' as vnf_ref_id,
				  'NULL' as vnf_flavour_id,
				  'NULL' as rddc_model,
				  'NULL' as affinity,
				  'NULL' as vnf_cap,
				  'NULL' as vnf_instance_cnt,
				  'NULL' as nsd_policy_no,
				  'NULL' as nsd_policy_item,
				  'NULL' as nsd_cp_no,
				  'NULL' as nsd_cp_id,
				  'NULL' as nsd_cp_vlr,
				  'NULL' as nsd_cp_type,
				  'NULL' as pnfd_no,
				  'NULL' as pnfd_item,
				  'NULL' as nsd_security_no,
				  'NULL' as nsd_security_item
			 FROM nfv_nsd_tab a,
				  (SELECT life_ref.life_no as nsd_life_no, 
						 life_ref.life_ref_no,
						 life_tab.item as nsd_life_item
					FROM nfv_lifecycle_ref as life_ref
					   INNER JOIN nfv_lifecycle_tab as life_tab
						   ON life_ref.life_no = life_tab.life_no
				  ) as d
			WHERE a.life_ref_no = d.life_ref_no
				 UNION ALL
		   SELECT a.version_no,
				  'NULL' as vnfd_no,
				  'NULL' as vnfd_item,
				  'NULL' as vnffgd_no,
				  'NULL' as vnffgd_item,
				  'NULL' as vld_no,
				  'NULL' as vld_item,
				  'NULL' as nsd_life_no,
				  'NULL' as nsd_life_item,
				  e.nsd_vnfdep_no,
				  e.nsd_vnfdep_item,
				  'NULL' as nsd_mnt_no,
				  'NULL' as nsd_mnt_item,
				  'NULL' as sdf_no,
				  'NULL' as sdf_id,
				  'NULL' as sdf_flavour_key,
				  'NULL' as vnf_ref_id,
				  'NULL' as vnf_flavour_id,
				  'NULL' as rddc_model,
				  'NULL' as affinity,
				  'NULL' as vnf_cap,
				  'NULL' as vnf_instance_cnt,
				  'NULL' as nsd_policy_no,
				  'NULL' as nsd_policy_item,
				  'NULL' as nsd_cp_no,
				  'NULL' as nsd_cp_id,
				  'NULL' as nsd_cp_vlr,
				  'NULL' as nsd_cp_type,
				  'NULL' as pnfd_no,
				  'NULL' as pnfd_item,
				  'NULL' as nsd_security_no,
				  'NULL' as nsd_security_item
			 FROM nfv_nsd_tab a,
				  (SELECT nfv_vnfdep_ref.vnfdep_no as nsd_vnfdep_no, 
						 nfv_vnfdep_ref.vnfdep_ref_no,
						 nfv_vnfdep_tab.item as nsd_vnfdep_item
					FROM nfv_vnfdep_ref
					   INNER JOIN nfv_vnfdep_tab
						   ON nfv_vnfdep_ref.vnfdep_no = nfv_vnfdep_tab.vnfdep_no
				  ) as e
			WHERE a.vnf_ref_no = e.vnfdep_ref_no
				 UNION ALL
		   SELECT a.version_no,
				  'NULL' as vnfd_no,
				  'NULL' as vnfd_item,
				  'NULL' as vnffgd_no,
				  'NULL' as vnffgd_item,
				  'NULL' as vld_no,
				  'NULL' as vld_item,
				  'NULL' as nsd_life_no,
				  'NULL' as nsd_life_item,
				  'NULL' as nsd_vnfdep_no,
				  'NULL' as nsd_vnfdep_item,
				  f.nsd_mnt_no,
				  f.nsd_mnt_item,
				  'NULL' as sdf_no,
				  'NULL' as sdf_id,
				  'NULL' as sdf_flavour_key,
				  'NULL' as vnf_ref_id,
				  'NULL' as vnf_flavour_id,
				  'NULL' as rddc_model,
				  'NULL' as affinity,
				  'NULL' as vnf_cap,
				  'NULL' as vnf_instance_cnt,
				  'NULL' as nsd_policy_no,
				  'NULL' as nsd_policy_item,
				  'NULL' as nsd_cp_no,
				  'NULL' as nsd_cp_id,
				  'NULL' as nsd_cp_vlr,
				  'NULL' as nsd_cp_type,
				  'NULL' as pnfd_no,
				  'NULL' as pnfd_item,
				  'NULL' as nsd_security_no,
				  'NULL' as nsd_security_item
			 FROM nfv_nsd_tab a,
				  (SELECT mnt_ref.mnt_no as nsd_mnt_no, 
						 mnt_ref.mnt_ref_no,
						 mnt_tab.item as nsd_mnt_item
					FROM nfv_monitoring_ref as mnt_ref
					   INNER JOIN nfv_monitoring_tab as mnt_tab
						   ON mnt_ref.mnt_no = mnt_tab.mnt_no
				  ) as f
			WHERE a.monitoring_ref_no = f.mnt_ref_no
				 UNION ALL
		   SELECT a.version_no,
				  'NULL' as vnfd_no,
				  'NULL' as vnfd_item,
				  'NULL' as vnffgd_no,
				  'NULL' as vnffgd_item,
				  'NULL' as vld_no,
				  'NULL' as vld_item,
				  'NULL' as nsd_life_no,
				  'NULL' as nsd_life_item,
				  'NULL' as nsd_vnfdep_no,
				  'NULL' as nsd_vnfdep_item,
				  'NULL' as nsd_mnt_no,
				  'NULL' as nsd_mnt_item,
				  g.sdf_no,
				  g.sdf_id,
				  g.sdf_flavour_key,
				  g.vnf_ref_id,
				  g.vnf_flavour_id,
				  g.rddc_model,
				  g.affinity,
				  g.vnf_cap,
				  g.vnf_instance_cnt,
				  'NULL' as nsd_policy_no,
				  'NULL' as nsd_policy_item,
				  'NULL' as nsd_cp_no,
				  'NULL' as nsd_cp_id,
				  'NULL' as nsd_cp_vlr,
				  'NULL' as nsd_cp_type,
				  'NULL' as pnfd_no,
				  'NULL' as pnfd_item,
				  'NULL' as nsd_security_no,
				  'NULL' as nsd_security_item
			 FROM nfv_nsd_tab a,
				  (SELECT nfv_sdf_ref.sdf_ref_no,
						 sdf_tab.*
					FROM nfv_sdf_ref,
					  (SELECT nfv_sdf_tab.sdf_no, 
							 nfv_sdf_tab.sdf_id, 
							 nfv_sdf_tab.sdf_flavour_key, 
							 convnf.* 
						FROM nfv_convnf_ref, 
							 nfv_sdf_tab, 
							 (SELECT nfv_convnf_tab.convnf_no,  
									nfv_version_tab.id as vnf_ref_id, 
									nfv_convnf_tab.flavour_nm as vnf_flavour_id, 
									nfv_convnf_tab.rddc_model, 
									nfv_convnf_tab.affinity, 
									nfv_convnf_tab.vnf_cap, 
									nfv_convnf_tab.vnf_instance_cnt  
							   FROM nfv_convnf_tab, 
									nfv_version_tab 
							  WHERE nfv_convnf_tab.version_no = nfv_version_tab.version_no  
							 ) as convnf 
					   WHERE nfv_convnf_ref.convnf_no = convnf.convnf_no 
						 AND nfv_sdf_tab.convnf_ref_no = nfv_convnf_ref.convnf_ref_no 
						 ) as sdf_tab
				   WHERE nfv_sdf_ref.sdf_no = sdf_tab.sdf_no
				  ) as g
			WHERE a.sdf_ref_no = g.sdf_ref_no
				 UNION ALL
		   SELECT a.version_no,
				  'NULL' as vnfd_no,
				  'NULL' as vnfd_item,
				  'NULL' as vnffgd_no,
				  'NULL' as vnffgd_item,
				  'NULL' as vld_no,
				  'NULL' as vld_item,
				  'NULL' as nsd_life_no,
				  'NULL' as nsd_life_item,
				  'NULL' as nsd_vnfdep_no,
				  'NULL' as nsd_vnfdep_item,
				  'NULL' as nsd_mnt_no,
				  'NULL' as nsd_mnt_item,
				  'NULL' as sdf_no,
				  'NULL' as sdf_id,
				  'NULL' as sdf_flavour_key,
				  'NULL' as vnf_ref_id,
				  'NULL' as vnf_flavour_id,
				  'NULL' as rddc_model,
				  'NULL' as affinity,
				  'NULL' as vnf_cap,
				  'NULL' as vnf_instance_cnt,
				  h.nsd_policy_no,
				  h.nsd_policy_item,
				  'NULL' as nsd_cp_no,
				  'NULL' as nsd_cp_id,
				  'NULL' as nsd_cp_vlr,
				  'NULL' as nsd_cp_type,
				  'NULL' as pnfd_no,
				  'NULL' as pnfd_item,
				  'NULL' as nsd_security_no,
				  'NULL' as nsd_security_item
			 FROM nfv_nsd_tab a,
				  (SELECT nfv_policy_ref.policy_no as nsd_policy_no,
						 nfv_policy_ref.policy_ref_no,
						 nfv_policy_tab.policy as nsd_policy_item
					FROM nfv_policy_ref
					   INNER JOIN nfv_policy_tab
						   ON nfv_policy_ref.policy_no = nfv_policy_tab.policy_no
				  ) as h
			WHERE a.policy_ref_no = h.policy_ref_no
				 UNION ALL
		   SELECT a.version_no,
				  'NULL' as vnfd_no,
				  'NULL' as vnfd_item,
				  'NULL' as vnffgd_no,
				  'NULL' as vnffgd_item,
				  'NULL' as vld_no,
				  'NULL' as vld_item,
				  'NULL' as nsd_life_no,
				  'NULL' as nsd_life_item,
				  'NULL' as nsd_vnfdep_no,
				  'NULL' as nsd_vnfdep_item,
				  'NULL' as nsd_mnt_no,
				  'NULL' as nsd_mnt_item,
				  'NULL' as sdf_no,
				  'NULL' as sdf_id,
				  'NULL' as sdf_flavour_key,
				  'NULL' as vnf_ref_id,
				  'NULL' as vnf_flavour_id,
				  'NULL' as rddc_model,
				  'NULL' as affinity,
				  'NULL' as vnf_cap,
				  'NULL' as vnf_instance_cnt,
				  'NULL' as nsd_policy_no,
				  'NULL' as nsd_policy_item,
				  i.nsd_cp_no,
				  i.nsd_cp_id,
				  i.nsd_cp_vlr,
				  i.nsd_cp_type,
				  'NULL' as pnfd_no,
				  'NULL' as pnfd_item,
				  'NULL' as nsd_security_no,
				  'NULL' as nsd_security_item
			 FROM nfv_nsd_tab a,
				  (SELECT nfv_cp_ref.cp_no as nsd_cp_no, 
						 nfv_cp_ref.cp_ref_no,
						 nfv_cp_tab.id as nsd_cp_id,
						 nfv_cp_tab.virtual_link_reference as nsd_cp_vlr,
						 nfv_cp_tab.type as nsd_cp_type
					FROM nfv_cp_ref
					   INNER JOIN nfv_cp_tab
						   ON nfv_cp_ref.cp_no = nfv_cp_tab.cp_no
				  ) as i
			WHERE a.cp_ref_no = i.cp_ref_no
				 UNION ALL
		   SELECT a.version_no,
				  'NULL' as vnfd_no,
				  'NULL' as vnfd_item,
				  'NULL' as vnffgd_no,
				  'NULL' as vnffgd_item,
				  'NULL' as vld_no,
				  'NULL' as vld_item,
				  'NULL' as nsd_life_no,
				  'NULL' as nsd_life_item,
				  'NULL' as nsd_vnfdep_no,
				  'NULL' as nsd_vnfdep_item,
				  'NULL' as nsd_mnt_no,
				  'NULL' as nsd_mnt_item,
				  'NULL' as sdf_no,
				  'NULL' as sdf_id,
				  'NULL' as sdf_flavour_key,
				  'NULL' as vnf_ref_id,
				  'NULL' as vnf_flavour_id,
				  'NULL' as rddc_model,
				  'NULL' as affinity,
				  'NULL' as vnf_cap,
				  'NULL' as vnf_instance_cnt,
				  'NULL' as nsd_policy_no,
				  'NULL' as nsd_policy_item,
				  'NULL' as nsd_cp_no,
				  'NULL' as nsd_cp_id,
				  'NULL' as nsd_cp_vlr,
				  'NULL' as nsd_cp_type,
				  q.pnfd_no,
				  q.pnfd_item,
				  'NULL' as nsd_security_no,
				  'NULL' as nsd_security_item
			 FROM nfv_nsd_tab a,
				  (SELECT nfv_function_ref.function_no as pnfd_no,
						 nfv_function_ref.function_ref_no,
						 nfv_version_tab.id as pnfd_item
					FROM nfv_function_ref
					   INNER JOIN nfv_version_tab
						   ON nfv_function_ref.function_no = nfv_version_tab.version_no
				  ) as q
			WHERE a.pnfd_ref_no = q.function_ref_no
				 UNION ALL
		   SELECT a.version_no,
				  'NULL' as vnfd_no,
				  'NULL' as vnfd_item,
				  'NULL' as vnffgd_no,
				  'NULL' as vnffgd_item,
				  'NULL' as vld_no,
				  'NULL' as vld_item,
				  'NULL' as nsd_life_no,
				  'NULL' as nsd_life_item,
				  'NULL' as nsd_vnfdep_no,
				  'NULL' as nsd_vnfdep_item,
				  'NULL' as nsd_mnt_no,
				  'NULL' as nsd_mnt_item,
				  'NULL' as sdf_no,
				  'NULL' as sdf_id,
				  'NULL' as sdf_flavour_key,
				  'NULL' as vnf_ref_id,
				  'NULL' as vnf_flavour_id,
				  'NULL' as rddc_model,
				  'NULL' as affinity,
				  'NULL' as vnf_cap,
				  'NULL' as vnf_instance_cnt,
				  'NULL' as nsd_policy_no,
				  'NULL' as nsd_policy_item,
				  'NULL' as nsd_cp_no,
				  'NULL' as nsd_cp_id,
				  'NULL' as nsd_cp_vlr,
				  'NULL' as nsd_cp_type,
				  'NULL' as pnfd_no,
				  'NULL' as pnfd_item,
				  k.nsd_security_no,
				  k.nsd_security_item
			 FROM nfv_nsd_tab a,
				  (SELECT nfv_security_ref.security_no as nsd_security_no,
						 nfv_security_ref.security_ref_no,
						 nfv_security_tab.item as nsd_security_item
					FROM nfv_security_ref
					   INNER JOIN nfv_security_tab
						   ON nfv_security_ref.security_no = nfv_security_tab.security_no
				  ) as k
			WHERE a.sec_ref_no = k.security_ref_no
		   ) as nsd
		WHERE nfv_version_tab.version_no = nsd.version_no
				   AND nfv_version_tab.id = #{id}	
	</select>
	
	<select id="getNsdOne" parameterType="hashmap" resultType="java.util.LinkedHashMap" >
		SELECT 
			version_tab.version_no, version_tab.id, version_tab.version, nsd_tab.nsd_no, nsd_tab.vnfd_ref_no, nsd_tab.vnffgd_ref_no, 
		    nsd_tab.vld_ref_no, nsd_tab.life_ref_no, nsd_tab.vnf_ref_no, nsd_tab.monitoring_ref_no, nsd_tab.sdf_ref_no, 
		    nsd_tab.policy_ref_no, nsd_tab.cp_ref_no, nsd_tab.pnfd_ref_no, nsd_tab.sec_ref_no
		FROM
		    nfv_version_tab as version_tab inner join nfv_nsd_tab as nsd_tab on nsd_tab.version_no = version_tab.version_no
		WHERE
		    version_tab.id = #{id}	
	</select>
	
	<insert id="postNsd" parameterType="hashmap">
		 insert into 
		 	nfv_nsd_tab( nsd_no, version_no, vnfd_ref_no, vnffgd_ref_no, vld_ref_no, life_ref_no, vnf_ref_no, monitoring_ref_no, sdf_ref_no, policy_ref_no, cp_ref_no, pnfd_ref_no, sec_ref_no ) 
		 values( #{nsd_no}, #{version_no}, #{vnfd_ref_no}, #{vnffgd_ref_no}, #{vld_ref_no}, #{life_ref_no}, #{vnf_ref_no}, #{monitoring_ref_no}, #{sdf_ref_no}, #{policy_ref_no}, #{cp_ref_no}, #{pnfd_ref_no}, #{sec_ref_no} )
	</insert>
	
	<insert id="postVnfdepRef" parameterType="hashmap">
		 insert into 
		 	nfv_vnfdep_ref( vnfdep_ref_no, vnfdep_no ) 
		 values( #{vnfdep_ref_no}, #{vnfdep_no} )
	</insert>
	
	<insert id="postSdfRef" parameterType="hashmap">
		 insert into 
		 	nfv_sdf_ref( sdf_ref_no, sdf_no ) 
		 values( #{sdf_ref_no}, #{sdf_no} )
	</insert>
	
	<delete id="deleteNsd" parameterType="hashmap">
		delete 
		from 
			nfv_nsd_tab
		where 
			nsd_no = #{nsd_no}
	</delete>	
	
	<delete id="deleteVnfdepRef" parameterType="hashmap">
		delete 
		from 
			nfv_vnfdep_ref
		where 
			vnfdep_ref_no = #{vnfdep_ref_no}
	</delete>
	
	<delete id="deleteSdfRef" parameterType="hashmap">
		delete 
		from 
			nfv_sdf_ref
		where 
			sdf_ref_no = #{sdf_ref_no}
	</delete>
	
</mapper>
