<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Vnfm">

	<!-- vnfdrscriptor 관련 -->
	<insert id="addVnfdInfo" parameterType="VNFDescriptorVO">
		INSERT INTO vnfd_info(
		vnfd_id,
		vnfd_name,
		image_id
		)
		VALUES(
		#{vnfd_id},
		#{vnfd_name},
		#{image_id}
		)
	</insert>

	<update id="updateVnfd" parameterType="VNFDescriptorVO">
		UPDATE vnfd_info
		<set>
			<if test='image_id != null and !image_id.equals("")'>
				image_id = #{image_id},
			</if>
			<if test='vnfd_name != null and !vnfd_name.equals("")'>
				vnfd_name = #{vnfd_name},
			</if>
			<if test='zone != null and !zone.equals("")'>
				zone = #{zone},
			</if>
			<if test='created != null and !created.equals("")'>
				created = #{created},
			</if>
			
		</set>
		<where>
			<if test='vnfd_id != null and !vnfd_id.equals("")'>
				vnfd_id = #{vnfd_id}
			</if>
			<if test='old_image_id != null and !old_image_id.equals("")'>
				AND image_id = #{old_image_id}
			</if>
		</where>
	</update>

	<select id="getVnfdList" parameterType="VNFDescriptorVO"
		resultType="VNFDescriptorVO">
		SELECT *
		FROM vnfd_info
		<where>
			<if test='vnfd_id != null and !vnfd_id.equals("")'>
				vnfd_id = #{vnfd_id}
			</if>
		</where>
	</select>
	

	<delete id="deleteVnfd" parameterType="VNFDescriptorVO">
		DELETE
		FROM vnfd_info
		<where>
			<if test='vnfd_id != null and !vnfd_id.equals("")'>
				vnfd_id = #{vnfd_id}
			</if>
			<if test='image_id != null and !image_id.equals("")'>
				AND image_id = #{image_id}
			</if>
		</where>
	</delete>

	<!-- vnfc 관련 -->
	<insert id="addVnfcInfo" parameterType="VnfcVO">
		INSERT INTO vnfc_info(
		vnfd_id,
		<if test='vnfc_id != null and !vnfc_id.equals("")'>
			vnfc_id,
		</if>
		vnfc_name,
		vnfc_real_name,
		<if test='status != null and !status.equals("")'>
		status,
		</if>
		<if test='port_id != null and !port_id.equals("")'>
			port_id,
		</if>
		<if test='network != null and !network.equals("")'>
			network,
		</if>
		num_instances,
		max_instances,
		priority,
		scaling_flag,
		in_policy,
		out_policy,
		<if test='guard_time != null and !guard_time.equals("")'>
		guard_time,
		</if>
		<if test='break_policy != null and !break_policy.equals("")'>
		break_policy,
		</if>
		<if test='affinity != null and !affinity.equals("")'>
		affinity,
		</if>
		<if test='flavor_id != null and !flavor_id.equals("")'>
			flavor_id,
		</if>
		flavor_name,
		flavor_real_name,
		flavor_vmem,
		flavor_vcpu,
		flavor_vdisk,
		create_at
		)
		VALUES(
		#{vnfd_id},
		<if test='vnfc_id != null and !vnfc_id.equals("")'>
			#{vnfc_id},
		</if>
		#{vnfc_name},
		#{vnfc_real_name},
		<if test='status != null and !status.equals("")'>
		#{status},
		</if>
		<if test='port_id != null and !port_id.equals("")'>
			#{port_id},
		</if>
		<if test='network != null and !network.equals("")'>
			#{network},
		</if>
		#{num_instances},
		#{max_instances},
		#{priority},
		#{scaling_flag},
		#{in_policy},
		#{out_policy},
		<if test='guard_time != null and !guard_time.equals("")'>
		#{guard_time},
		</if>
		<if test='break_policy != null and !break_policy.equals("")'>
		#{break_policy},
		</if>
		<if test='affinity != null and !affinity.equals("")'>
		#{affinity},
		</if>
		<if test='flavor_id != null and !flavor_id.equals("")'>
			#{flavor_id},
		</if>
		#{flavor_name},
		#{flavor_real_name},
		#{flavor_vmem},
		#{flavor_vcpu},
		#{flavor_vdisk},
		now()
		)
	</insert>

	<update id="updateVnfc" parameterType="VnfcVO">
		UPDATE vnfc_info
		<set>
			<if test='flavor_id != null and !flavor_id.equals("")'>
				flavor_id = #{flavor_id},
			</if>
			<if test='vnfc_id != null and !vnfc_id.equals("")'>
				vnfc_id = #{vnfc_id},
			</if>
			<if test='status != null and !status.equals("")'>
				status = #{status},
			</if>
			<if test='snapshot_id != null and !snapshot_id.equals("")'>
				snapshot_id = #{snapshot_id},
			</if>
			<if test='scale_in_time != 0'>
				scale_in_time = #{scale_in_time},
			</if>
			<if test='scale_out_time != 0'>
				scale_out_time = #{scale_out_time},
			</if>
			<if test='guard_time != 0'>
				guard_time = #{guard_time},
			</if>
			<if test='vnfc_name_ref != null and !vnfc_name_ref.equals("")'>
				vnfc_name = #{vnfc_name_ref}
			</if>
		</set>
		<where>
			<if test='vnfd_id != null and !vnfd_id.equals("")'>
				vnfd_id = #{vnfd_id}
			</if>
			<if test='flavor_name != null and !flavor_name.equals("")'>
				AND flavor_name = #{flavor_name}
			</if>
			<if test='vnfc_name != null and !vnfc_name.equals("")'>
				AND vnfc_name = #{vnfc_name}
			</if>
			<if test='vnfc_id_ref != null and !vnfc_id_ref.equals("")'>
				AND vnfc_id = #{vnfc_id_ref}
			</if>
			<if test='port_id != null and !port_id.equals("")'>
				AND port_id = #{port_id}
			</if>
		</where>
	</update>

	<select id="getVnfcList" parameterType="VnfcVO" resultType="VnfcVO">
		SELECT *
		FROM vnfc_info
		<where>
			<if test='vnfd_id != null and !vnfd_id.equals("")'>
				vnfd_id = #{vnfd_id}
			</if>
			<if test='vnfc_id != null and !vnfc_id.equals("")'>
				AND vnfc_id = #{vnfc_id}
			</if>
			<if test='status != null and !status.equals("")'>
				AND status = #{status}
			</if>
			<if test='vnfc_name != null and !vnfc_name.equals("")'>
				AND vnfc_name = #{vnfc_name}
			</if>
			<if test='flavor_id != null and !flavor_id.equals("")'>
				AND flavor_id = #{flavor_id}
			</if>
			<if test='vnfc_real_name != null and !vnfc_real_name.equals("")'>
				AND vnfc_real_name = #{vnfc_real_name}
			</if>
		</where>
		order by priority
	</select>
	<select id="getVnfdNamefromVnfcId" parameterType="string" resultType="VnfcVO">
		SELECT vnfd_name 
		FROM vnfd_info
		WHERE vnfd_id = (SELECT vnfd_id FROM vnfc_info WHERE vnfc_id = #{inData}
	</select>
	<select id="notCompleteList" parameterType="string" resultType="VnfcVO">
		SELECT *
		FROM vnfc_info		
		WHERE status != 'Completed'
		AND vnfd_id = #{inData}
	</select>
	
	
	<select id="getVnfdRepoList" parameterType="VnfcVO"
		resultType="VnfcVO">
		SELECT vnfd_id,vnfc_real_name, vnfc_name
		FROM vnfc_info 
		where vnfd_id = #{vnfd_id}
		group by vnfc_real_name
		order by vnfc_real_name asc
	</select>


	<delete id="deleteVnfc" parameterType="VnfcVO">
		DELETE
		FROM vnfc_info
		<where>
			<if test='vnfd_id != null and !vnfd_id.equals("")'>
				vnfd_id = #{vnfd_id}
			</if>
			<if test='vnfc_name != null and !vnfc_name.equals("")'>
				AND vnfc_name = #{vnfc_name}
			</if>
			<if test='vnfc_id != null and !vnfc_id.equals("")'>
				AND vnfc_id = #{vnfc_id}
			</if>
			<if test='flavor_id != null and !flavor_id.equals("")'>
				AND flavor_id = #{flavor_id}
			</if>
		</where>
	</delete>
	
	<select id="getVnfcLastIndex" parameterType="hashmap" resultType="string">
		SELECT 
			max(cast(replace(vnfc_name, #{replace_name}, "") as unsigned)) AS vnfc_name
		FROM vnfc_info
		WHERE vnfc_real_name = #{vnfc_real_name}
		AND vnfd_id = #{vnfd_id}
		
	</select>
	
	<select id="getAlarmNovaServicesList" parameterType="AlarmNovaServicesVO"
		resultType="AlarmNovaServicesVO">
		SELECT *
		FROM nova.services
	</select>
	
	<select id="getAlarmNertronList" parameterType="AlarmNeutronAgentVO"
		resultType="AlarmNeutronAgentVO">
		SELECT *
		FROM neutron.agents
	</select>
	
	<select id="getEndpointList" parameterType="EndpointVO"
		resultType="EndpointVO">
		SELECT *
		FROM keystone.endpoint
	</select>
	
	<select id="getInstanceActionLog" parameterType="string"
		resultType="ActionLogVO">
		SELECT a.created_at, a.updated_at, a.deleted_at, a.id, a.action, a.instance_uuid, a.request_id, a.user_id
		, a.project_id, (b.start_time + interval 9 hour) start_time, (b.finish_time  + interval 9 hour) finish_time, a.message, a.deleted
		, b.traceback
		FROM 
		nova.instance_actions a, nova.instance_actions_events b
		WHERE 
		instance_uuid = #{inData}
		and a.id = b.action_id
		AND a.deleted = 0
		ORDER BY created_at desc
	</select>
	
	<!-- EventLog 관련 -->
	<insert id="addEvnetLogInfo" parameterType="EventLogVO">
		INSERT INTO event_log(
		log_id,
		name,
		descriptor,
		create_at
		)
		VALUES(
		#{log_id},
		#{name},
		#{descriptor},
		now()
		)
	</insert>
	<select id="getEvnetLogList" parameterType="EventLogVO" resultType="EventLogVO">
		SELECT *
		FROM event_log
		ORDER by create_at desc limit 200
	</select>

</mapper>
